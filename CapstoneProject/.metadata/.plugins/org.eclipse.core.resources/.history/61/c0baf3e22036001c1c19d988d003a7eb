package com.example.demo.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.model.Expenses;
import com.example.demo.repository.ExpensesRepository;


import com.example.demo.exception.ResourceNotFoundException;

@CrossOrigin(origins="http://localhost:3000")
@RestController
@RequestMapping("/api/")
public class ExpensesController {

@Autowired
	private ExpensesRepository expensesRepo;
    


	//get all students
	
	@GetMapping("/allexpenses")
	public List<Expenses> getAllExpenses()
	{
		
		return expensesRepo.findAll();
	}
	

	@PostMapping("/addexpenses")
    public Expenses newExpenses(@RequestBody Expenses s)
    {
		
		return expensesRepo.save(s);
    }
	
	
	@GetMapping("/expenses/{id}")
	public ResponseEntity<Expenses> getExpensesById(@PathVariable int id)
	{
		Expenses s= expensesRepo.findById(id).orElseThrow(() ->  new ResourceNotFoundException("Expense not found"));
		return ResponseEntity.ok(s);                 
	}
	
	@GetMapping("/expenses/{person}")
	public List<Expenses> getExpensesByPerson(@PathVariable String person)
	{
		//return studentRepo.findByName(name);
		
		List <Expenses> expenses=expensesRepo.findByPerson(person);
		if(expenses.isEmpty())
		{
			System.out.println(new ResourceNotFoundException("Student(s) with the name "+ person +" not found"));
		}
		
		return expensesRepo.findByPerson(person);
	}
	
	
	
	@PutMapping("/expenses/{id}")
	public ResponseEntity<Expenses> updateStudent(@PathVariable int id, @RequestBody Expenses student)
	{
		Expenses s= expensesRepo.findById(id).orElseThrow(() ->  new ResourceNotFoundException("Student not found"));
	    s.setPerson(expense.getPerson());
	    s.setCategory(expense.getCategory());
	    s.setAmount(expense.getAmount);
	    s.setDate(expense.getDate);
	    Expenses updatedStudent=studentRepo.save(s);
	    return ResponseEntity.ok(updatedStudent);
	}
	

	
	@DeleteMapping("/expenses/{id}")
	public String deleteExpenses(@PathVariable int id)
	{
		studentRepo.findById(id).orElseThrow(() ->  new ResourceNotFoundException("Student not found"));
	    studentRepo.deleteById(id);
	    return "The student with id: "+ id +" is removed from the database.";
	}
	
}
